/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javearticuloscliente;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import static javearticuloscliente.MenuAutor.usu;
import submision.ApiSubmision;
import submision.ApiSubmisionService;
import submision.Evento;
import submision.Revision;
import submision.Submision;
import usuario.ApiUsuarios;
import usuario.ApiUsuariosService;
import usuario.Usuario;

/**
 *
 * @author USER
 */
public class MenuEditor extends javax.swing.JFrame {
    
    static int usu;
    DefaultTableModel modelEvento;
    DefaultTableModel modelSubmision;
    DefaultTableModel modelRevisor;
    ApiSubmision apiS;
    ApiSubmisionService servicioS;
    ApiUsuariosService servicioU;
    ApiUsuarios apiU;

    /**
     * Creates new form MenuEditor
     */
    public MenuEditor(int usu) {
        initComponents();
        this.usu = usu;
        modelEvento = new DefaultTableModel();
        modelEvento.addColumn("ID");
        modelEvento.addColumn("Tema");
        modelEvento.addColumn("Fecha Inicio");
        modelEvento.addColumn("Fecha Salida");
        modelEvento.addColumn("Lugar");
        this.jTable1.setModel(modelEvento);
        modelSubmision = new DefaultTableModel();
        modelSubmision.addColumn("ID evento");
        modelSubmision.addColumn("ID submision");
        modelSubmision.addColumn("ID autor");
        modelSubmision.addColumn("Autor");
        modelSubmision.addColumn("Fecha subida");
        modelSubmision.addColumn("Estado");
        modelSubmision.addColumn("N. revisores");
        this.jTable2.setModel(modelSubmision);
        modelRevisor = new DefaultTableModel();
        modelRevisor.addColumn("ID");
        modelRevisor.addColumn("Nombre");
        modelRevisor.addColumn("Correo");
        modelRevisor.addColumn("Carrera");
        modelRevisor.addColumn("Postgrados");
        this.jTable3.setModel(modelRevisor);
        servicioS = new ApiSubmisionService();
        apiS = servicioS.getApiSubmisionPort();
        servicioU = new ApiUsuariosService();
        apiU = servicioU.getApiUsuariosPort();
        this.setLocationRelativeTo(null);
        cargarEventos();
        cargarSubmisions(false);
        cargarRevisores(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Javearticulos");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Men√∫ Editor");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Eventos");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Nuevo evento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Asignar revisor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Mostrar revisores");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Submisions");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Revisores");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jButton4.setText("Logout");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Mostrar submisions por evento");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Calcular calificacion final");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(52, 52, 52))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(180, 180, 180)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jButton1)))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new CrearEvento().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        cargarEventos();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(jTable2.getSelectedRow() == -1 || jTable3.getSelectedRow() == -1){
            Utils.Util.mostrarMensaje("Seleccione una submision y un revisor");
        }else{
            List<Revision> revisiones = apiS.revisionesSubmision(new BigDecimal(modelSubmision.getValueAt(jTable2.getSelectedRow(), 1).toString()));
            
            for(Revision r: revisiones){
                System.out.println(r.getUsuarioIdusuario().getIdusuario()+" "+modelRevisor.getValueAt(jTable3.getSelectedRow(), 0).toString());
               if(r.getUsuarioIdusuario().getIdusuario().compareTo(new BigDecimal(modelRevisor.getValueAt(jTable3.getSelectedRow(), 0).toString())) == 0){
                    Utils.Util.mostrarMensaje("Este revisor ya esta asignado a esta submision");
                    return;
               }
            }
            apiS.agregarRevisor(new BigDecimal(modelSubmision.getValueAt(jTable2.getSelectedRow(), 1).toString()), new BigDecimal(modelRevisor.getValueAt(jTable3.getSelectedRow(), 0).toString()));
            Utils.Util.mostrarMensaje("Asignacion realizada");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        cargarSubmisions(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        cargarRevisores(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if(jTable2.getSelectedRow() != -1){
            Object idS = modelSubmision.getValueAt(jTable2.getSelectedRow(), 1);
            List<Revision> revisiones = apiS.revisionesSubmision(new BigDecimal(idS.toString()));

            if(revisiones.size() == 0){
                Utils.Util.mostrarMensaje("No hay revisores");
                return;
            }
            
            new CalificacionFinal(usu, idS.toString()).setVisible(true);
            
        }else{
            Utils.Util.mostrarMensaje("Seleccione una submision");
        } 
    }//GEN-LAST:event_jButton6ActionPerformed

    public void removeAllRows(DefaultTableModel dtm){
        try{
            int rowCount = dtm.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                dtm.removeRow(i);
            }
        } catch (Exception e){
            
        }
    }
    
    public void cargarEventos(){
        String []datos;
        List<Evento> eventos = apiS.eventos();
        removeAllRows(modelEvento);
        boolean hay = false;
        for(Evento e: eventos){
            hay = true;
            datos = new String[5];
            datos[0] = String.valueOf(e.getIdevento());
            datos[1] = String.valueOf(e.getTema());
            datos[2] = String.valueOf(Utils.Util.XMLGCToString(e.getFechainicio()));
            datos[3] = String.valueOf(Utils.Util.XMLGCToString(e.getFechafin()));
            datos[4] = String.valueOf(e.getLugar());
            modelEvento.addRow(datos);
        }
        if(!hay){
            Utils.Util.mostrarMensaje("No hay eventos");
        }
    }
    
    public void cargarSubmisions(boolean feven){
        if(feven){
            if(jTable1.getSelectedRow() != -1){
                String []datos;
                 List<Submision> submisions = apiS.submisiones();
                 Object idA = modelEvento.getValueAt(jTable1.getSelectedRow(), 0);
                 removeAllRows(modelSubmision);
                 boolean hay = false;
                 for(Submision s: submisions){
                     if( idA.toString().equalsIgnoreCase(String.valueOf(s.getEventoIdevento().getIdevento()))){
                        hay = true;
                        datos = new String[7];
                        datos[0] = String.valueOf(s.getEventoIdevento().getIdevento());
                        datos[1] = String.valueOf(s.getIdsubmision());
                        datos[2] = String.valueOf(s.getUsuarioIdusuario().getIdusuario());
                        datos[3] = String.valueOf(s.getUsuarioIdusuario().getNombres() + " " + s.getUsuarioIdusuario().getApellidos());
                        datos[4] = String.valueOf(Utils.Util.XMLGCToString(s.getFechasubida()));
                        datos[5] = String.valueOf(s.getEstado());
                        datos[6] = String.valueOf(apiS.revisionesSubmision(s.getIdsubmision()).size());
                        modelSubmision.addRow(datos);
                     }
                 }
                 if(!hay){
                     Utils.Util.mostrarMensaje("No hay submisiones");
                 } 
             }else{
                 Utils.Util.mostrarMensaje("Seleccione un evento");
             } 
        }else{
            String []datos;
            List<Submision> submisions = apiS.submisiones();
            removeAllRows(modelSubmision);
            boolean hay = false;
            for(Submision s: submisions){
                hay = true;
                datos = new String[7];
                datos[0] = String.valueOf(s.getEventoIdevento().getIdevento());
                datos[1] = String.valueOf(s.getIdsubmision());
                datos[2] = String.valueOf(s.getUsuarioIdusuario().getIdusuario());
                datos[3] = String.valueOf(s.getUsuarioIdusuario().getNombres() + " " + s.getUsuarioIdusuario().getApellidos());
                datos[4] = String.valueOf(Utils.Util.XMLGCToString(s.getFechasubida()));
                datos[5] = String.valueOf(s.getEstado());
                datos[6] = String.valueOf(apiS.revisionesSubmision(s.getIdsubmision()).size());
                modelSubmision.addRow(datos);
            }
            if(!hay){
                Utils.Util.mostrarMensaje("No hay submisiones");
            }
        }
        
    }
    
    public void cargarRevisores(boolean fsub){
        if(fsub){
            if(jTable2.getSelectedRow() != -1){
                String []datos;
                 Object idS = modelSubmision.getValueAt(jTable2.getSelectedRow(), 1);
                 List<Revision> revisiones = apiS.revisionesSubmision(new BigDecimal(idS.toString()));
                 removeAllRows(modelRevisor);
                 boolean hay = false;
                 for(Revision r: revisiones){
                    hay = true;
                    datos = new String[5];
                    datos[0] = String.valueOf(r.getUsuarioIdusuario().getIdusuario());
                    datos[1] = String.valueOf(r.getUsuarioIdusuario().getNombres() + " " + r.getUsuarioIdusuario().getApellidos());
                    datos[2] = String.valueOf(r.getUsuarioIdusuario().getCorreo());
                    datos[3] = String.valueOf(r.getUsuarioIdusuario().getCarrera());
                    datos[4] = String.valueOf(r.getUsuarioIdusuario().getPostgrados());
                    modelRevisor.addRow(datos);
                 }
                 if(!hay){
                     Utils.Util.mostrarMensaje("No hay revisores");
                 } 
             }else{
                 Utils.Util.mostrarMensaje("Seleccione una submision");
             } 
        }else{
            String []datos;
            List<Usuario> revisores = apiU.usuarioTipo("revisor");
            removeAllRows(modelRevisor);
            boolean hay = false;
            for(Usuario r: revisores){
                hay = true;
                datos = new String[5];
                datos[0] = String.valueOf(r.getIdusuario());
                datos[1] = String.valueOf(r.getNombres()+" "+r.getApellidos());
                datos[2] = String.valueOf(r.getCorreo());
                datos[3] = String.valueOf(r.getCarrera());
                datos[4] = String.valueOf(r.getPostgrados());
                modelRevisor.addRow(datos);
            }
            if(!hay){
                Utils.Util.mostrarMensaje("No hay revisores");
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuEditor(usu).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
